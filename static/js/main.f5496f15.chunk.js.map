{"version":3,"sources":["store/actions/board.actions.js","store/reducers/board.reducers.js","BoardDispatchContext.js","components/Card/Card.js","components/AddNoteForm/AddNoteForm.js","components/Column/Column.js","components/Board/Board.js","hooks/useLocalStorageReducer.js","App.js","registerServiceWorker.js","index.js"],"names":["nextTodoId","addColumn","text","type","id","removeColumn","columnId","toggleColumnInput","addItemToColum","item","transfer","moveItem","payload","dragIndex","hoverIndex","state","latestId","columns","createColumn","name","_ref","items","title","timeAdded","Date","toDateString","completed","showAddCardInput","boardReducer","action","Object","objectSpread","concat","toConsumableArray","filter","column","map","newLatestItemId","info","itemId","temp","BoardDispatch","React","createContext","cardSource","beginDrag","props","index","cardTarget","hover","monitor","component","getItem","hoverBoundingRect","findDOMNode","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","moveCard","DropTarget","connect","connectDropTarget","dropTarget","DragSource","connectDragSource","dragSource","isDragging","react_default","a","createElement","style","opacity","cursor","className","tabIndex","href","AddNoteForm","_useState","useState","_useState2","slicedToArray","cardTitle","setCardTitle","dispatch","useContext","value","onChange","e","target","handleChange","placeholder","minHeight","onClick","boardTarget","drop","isOver","Card_Card","key","maxWidth","length","AddNoteForm_AddNoteForm_AddNoteForm","Board","_useLocalStorageReduc","reducer","localStorageState","localStorage","JSON","parse","_useReducer","useReducer","_useReducer2","reducerState","useEffect","setItem","stringify","useLocalStorageReducer","initialState","_useLocalStorageReduc2","board","cols","components_Column_Column","Provider","addColumnAction","App","padding","components_Board_Board","Component","DragDropContext","HTML5Backend","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f5496f15.chunk.js","sourcesContent":["let nextTodoId = 0;\n\nexport const addColumn = text => ({\n  type: \"ADD_COLUMN\",\n  id: nextTodoId++,\n  text\n});\n\nexport const removeColumn = columnId => ({\n  type: \"REMOVE_COLUMN\",\n  id: columnId\n});\n\nexport const toggleColumnInput = columnId => ({\n  type: \"TOGGLE_COLUMN_INPUT\",\n  id: columnId\n});\n\nexport const addItemToColum = item => ({\n  type: \"ADD_ITEM_TO_COLUMN\",\n  transfer: item.transfer || false,\n  item\n});\n\nexport const removeItemFromColumn = info => ({\n  type: \"REMOVE_ITEM_FROM_COLUMN\",\n  id: info.columnId,\n  transfer: info.transfer || false,\n  info\n});\n\nexport const moveItem = payload => ({\n  type: \"MOVE_ITEM\",\n  dragIndex: payload.dragIndex,\n  hoverIndex: payload.hoverIndex,\n  columnId: payload.columnId\n});\n","export const state = {\n  latestId: 2,\n  columns: [\n    createColumn({ id: 0, name: \"Todo\" }),\n    createColumn({ id: 2, name: \"Done\" })\n  ]\n};\n\nfunction createColumn({ id, name }) {\n  return {\n    id,\n    name,\n    items:\n      name === \"Todo\"\n        ? [\n            {\n              id: 0,\n              title: \"Read a Book\",\n              columnId: 0,\n              timeAdded: new Date().toDateString()\n            },\n            {\n              id: 1,\n              title: \"Build a House\",\n              columnId: 0,\n              timeAdded: new Date().toDateString()\n            },\n            {\n              id: 2,\n              title: \"Create new Card\",\n              columnId: 0,\n              timeAdded: new Date().toDateString()\n            }\n          ]\n        : [],\n    completed: false,\n    showAddCardInput: false\n  };\n}\n\nconst boardReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_COLUMN\":\n      return {\n        ...state,\n        columns: [\n          ...state.columns,\n          {\n            latestId: 0,\n            id: action.id,\n            name: action.text,\n            items: [],\n            completed: false,\n            showAddCardInput: false\n          }\n        ]\n      };\n    case \"REMOVE_COLUMN\":\n      return {\n        ...state,\n        columns: state.columns.filter(column => column.id !== action.id)\n      };\n    case \"TOGGLE_COLUMN_INPUT\":\n      return {\n        ...state,\n        columns: state.columns.map(column => {\n          if (column.id === action.id) {\n            column.showAddCardInput = !column.showAddCardInput;\n          }\n          return column;\n        })\n      };\n    case \"ADD_ITEM_TO_COLUMN\":\n      const newLatestItemId = state.latestId + 1;\n      return {\n        ...state,\n        latestId: action.transfer ? state.latestId : newLatestItemId,\n        columns: state.columns.map(column => {\n          if (column.id === action.item.columnId) {\n            column.items = [\n              {\n                id: action.transfer ? action.item.id : newLatestItemId,\n                title: action.item.title,\n                columnId: action.item.columnId,\n                timeAdded: new Date().toDateString()\n              },\n              ...column.items\n            ];\n          }\n          return column;\n        })\n      };\n    case \"REMOVE_ITEM_FROM_COLUMN\":\n      return {\n        ...state,\n        columns: state.columns.map(column => {\n          if (column.id === action.info.columnId) {\n            column.items = column.items.filter(\n              item => item.id !== action.info.itemId\n            );\n          }\n          return column;\n        })\n      };\n    case \"MOVE_ITEM\":\n      return {\n        ...state,\n        columns: state.columns.map(column => {\n          if (column.id === action.columnId) {\n            const { dragIndex, hoverIndex } = action;\n            const temp = column.items[dragIndex];\n            if (temp) {\n              column.items[dragIndex] = column.items[hoverIndex];\n              column.items[hoverIndex] = temp;\n            }\n          }\n          return column;\n        })\n      };\n    default:\n      return state;\n  }\n};\n\nexport default boardReducer;\n","import React from \"react\";\n\nexport const BoardDispatch = React.createContext(null);\n","import React from \"react\";\nimport { findDOMNode } from \"react-dom\";\nimport { DragSource, DropTarget } from \"react-dnd\";\n\nimport \"./Card.css\";\n\nfunction BoardCard(props) {\n  const { isDragging, connectDragSource, connectDropTarget } = props;\n\n  return connectDragSource(\n    connectDropTarget(\n      <div\n        style={{\n          opacity: isDragging ? 0.2 : 1,\n          cursor: \"move\"\n        }}\n      >\n        <div className=\"card\" tabIndex=\"1\">\n          <div>\n            <div className=\"card__label\">{props.item.title}</div>\n            <span className=\"card__meta\">\n              <a className=\"card__meta__link\" href={props.item.id}>\n                #{props.item.id}\n              </a>{\" \"}\n              {props.item.timeAdded}\n            </span>\n          </div>\n        </div>\n      </div>\n    )\n  );\n}\n\nconst cardSource = {\n  beginDrag(props) {\n    return {\n      index: props.index,\n      ...props.item\n    };\n  }\n};\n\nconst cardTarget = {\n  hover(props, monitor, component) {\n    if (!component) {\n      return null;\n    }\n\n    const dragIndex = monitor.getItem().index;\n    const hoverIndex = props.index;\n\n    if (dragIndex === hoverIndex) {\n      return;\n    }\n\n    const hoverBoundingRect = findDOMNode(component).getBoundingClientRect();\n    const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n    const clientOffset = monitor.getClientOffset();\n    const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n      return;\n    }\n\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n      return;\n    }\n\n    const item = monitor.getItem();\n    // TODO: allow sorting in other columns\n    if (item.columnId === props.item.columnId) {\n      props.moveCard(dragIndex, hoverIndex);\n      monitor.getItem().index = hoverIndex;\n    }\n  }\n};\n\nexport default DropTarget(\"Card\", cardTarget, connect => ({\n  connectDropTarget: connect.dropTarget()\n}))(\n  DragSource(\"Card\", cardSource, (connect, monitor) => ({\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  }))(BoardCard)\n);\n","import React, { useState, useContext } from \"react\";\nimport { BoardDispatch } from \"../../BoardDispatchContext\";\nimport {\n  addItemToColum,\n  toggleColumnInput\n} from \"../../store/actions/board.actions\";\n\nimport \"./AddNoteForm.css\";\n\nexport const AddNoteForm = ({ column }) => {\n  const [cardTitle, setCardTitle] = useState(\"\");\n  const dispatch = useContext(BoardDispatch);\n\n  const addCard = (columnId, title) => {\n    dispatch(addItemToColum({ columnId: columnId, title }));\n    setCardTitle(\"\");\n  };\n\n  const toggleAddCardInput = columnId => {\n    dispatch(toggleColumnInput(columnId));\n  };\n\n  const handleChange = e => {\n    setCardTitle(e.target.value);\n  };\n\n  return (\n    <div className=\"note__form\">\n      <textarea\n        className=\"note__form__textarea\"\n        name=\"cardTitle\"\n        value={cardTitle}\n        onChange={e => handleChange(e)}\n        placeholder=\"Enter a note\"\n        style={{ minHeight: 76 }}\n      />\n      <div className=\"button__group\">\n        <button\n          className=\"button button--primary\"\n          onClick={() => addCard(column.id, cardTitle)}\n        >\n          Add\n        </button>\n        <button\n          className=\"button button--neutral\"\n          onClick={() => toggleAddCardInput(column.id)}\n        >\n          Close\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport BoardCard from \"../Card/Card\";\nimport {\n  addItemToColum,\n  removeColumn,\n  removeItemFromColumn,\n  toggleColumnInput,\n  moveItem\n} from \"../../store/actions/board.actions\";\nimport { DropTarget } from \"react-dnd\";\nimport { AddNoteForm } from \"../AddNoteForm/AddNoteForm\";\nimport \"./Column.css\";\n\nfunction Column(props) {\n  const { connectDropTarget, column, dispatch } = props;\n\n  const toggleAddCardInput = columnId => {\n    dispatch(toggleColumnInput(columnId));\n  };\n\n  const moveCard = (dragIndex, hoverIndex) => {\n    dispatch(\n      moveItem({\n        dragIndex,\n        hoverIndex,\n        columnId: column.id\n      })\n    );\n  };\n\n  const items = column.items.map((item, index) => (\n    <BoardCard key={item.id} item={item} index={index} moveCard={moveCard} />\n  ));\n\n  return connectDropTarget(\n    <div className=\"column\" tabIndex=\"9\">\n      <div style={{ maxWidth: 325 }} key={column.id}>\n        <div className=\"column__panel\">\n          <div className=\"column__panel__header\">\n            <span className=\"column__panel__label\">\n              <span className=\"column__panel__label--text\">\n                {column.items.length}\n              </span>\n            </span>{\" \"}\n            {column.name}\n          </div>\n          <div className=\"column__panel--left\">\n            <div className=\"icon\" onClick={() => toggleAddCardInput(column.id)}>\n              +\n            </div>\n            <div className=\"icon\" onClick={() => removeColumn(column.id)}>\n              ···\n            </div>\n          </div>\n        </div>\n        <div style={{ minHeight: 500 }}>\n          {column.showAddCardInput && <AddNoteForm column={column} />}\n          {items}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst boardTarget = {\n  drop(props, monitor) {\n    const item = monitor.getItem();\n    const { dispatch } = props;\n\n    if (item.columnId !== props.column.id) {\n      dispatch(\n        removeItemFromColumn({\n          columnId: item.columnId,\n          itemId: item.id,\n          transfer: true\n        })\n      );\n      dispatch(\n        addItemToColum({\n          ...item,\n          columnId: props.column.id,\n          transfer: true\n        })\n      );\n    }\n    return {\n      column: props.column\n    };\n  }\n};\n\nfunction collect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver()\n  };\n}\n\nexport default DropTarget(\"Card\", boardTarget, collect)(Column);\n","import React from \"react\";\nimport { addColumn as addColumnAction } from \"../../store/actions/board.actions\";\nimport boardReducer, {\n  state as initialState\n} from \"../../store/reducers/board.reducers\";\nimport { useLocalStorageReducer } from \"../../hooks/useLocalStorageReducer\";\nimport { BoardDispatch } from \"../../BoardDispatchContext\";\nimport Column from \"../Column/Column\";\n\nimport \"./Board.css\";\n\nfunction Board() {\n  const [board, dispatch] = useLocalStorageReducer(\n    \"boardState\",\n    boardReducer,\n    initialState\n  );\n\n  const addColumn = () => {\n    dispatch(addColumnAction(\"random stuff\"));\n  };\n\n  const cols = board.columns.map(column => (\n    <Column key={column.id} dispatch={dispatch} column={column} />\n  ));\n\n  return (\n    <BoardDispatch.Provider value={dispatch}>\n      <div className=\"board-container\">\n        {cols}\n        <div className=\"column column--dashed\">\n          <div className=\"column__placeholder\">\n            <button\n              className=\"button button--primary button--bold\"\n              onClick={addColumn}\n            >\n              + Add column\n            </button>\n          </div>\n        </div>\n      </div>\n    </BoardDispatch.Provider>\n  );\n}\n\nexport default Board;\n","import { useEffect, useReducer } from \"react\";\n\nexport function useLocalStorageReducer(key, reducer, state) {\n  let localStorageState;\n\n  if (key) {\n    localStorageState =\n      (localStorage[key] && JSON.parse(localStorage[key])) || state;\n  } else {\n    localStorageState = state;\n  }\n\n  const [reducerState, dispatch] = useReducer(reducer, localStorageState);\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(reducerState));\n  }, [reducerState]);\n\n  return [reducerState, dispatch];\n}\n","import React, { Component } from \"react\";\nimport Board from \"./components/Board/Board\";\nimport { DragDropContext } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div style={{ padding: 12 }}>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default DragDropContext(HTML5Backend)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nimport \"./index.css\";\n\nrender(<App />, document.getElementById(\"root\"));\n\nregisterServiceWorker();\n"],"sourceRoot":""}